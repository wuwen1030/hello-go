basePath: /api/v1
definitions:
  model.Article:
    properties:
      content:
        example: 文章内容
        type: string
      created_at:
        example: "2024-07-20T10:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      status:
        description: 1:draft 2:published
        example: 1
        type: integer
      title:
        example: 文章标题
        type: string
      updated_at:
        example: "2024-07-20T10:00:00Z"
        type: string
    type: object
  model.User:
    properties:
      created_at:
        example: "2024-07-20T10:00:00Z"
        type: string
      email:
        example: test@example.com
        type: string
      id:
        example: 1
        type: integer
      status:
        allOf:
        - $ref: '#/definitions/model.UserStatus'
        example: 1
      updated_at:
        example: "2024-07-20T10:00:00Z"
        type: string
      username:
        example: testuser
        type: string
    type: object
  model.UserStatus:
    enum:
    - 0
    - 1
    - 2
    type: integer
    x-enum-comments:
      UserStatusActive: '1: 已激活'
      UserStatusBanned: '2: 已封禁'
      UserStatusInactive: '0: 未激活'
    x-enum-varnames:
    - UserStatusInactive
    - UserStatusActive
    - UserStatusBanned
  response.ListResponse:
    properties:
      items: {}
      total:
        type: integer
    type: object
  response.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  service.CreateArticleRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  service.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  service.LoginResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/model.User'
    type: object
  service.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  service.UpdateArticleRequest:
    properties:
      content:
        type: string
      status:
        type: integer
      title:
        type: string
    type: object
  service.UpdateRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A simple CMS system API
  title: CMS API
  version: "1.0"
paths:
  /articles:
    get:
      consumes:
      - application/json
      description: Get articles with pagination
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: page_size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/response.ListResponse'
                  - properties:
                      items:
                        items:
                          $ref: '#/definitions/model.Article'
                        type: array
                    type: object
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List articles
      tags:
      - articles
    post:
      consumes:
      - application/json
      description: Create a new article
      parameters:
      - description: Article info
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/service.CreateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Article'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create article
      tags:
      - articles
  /articles/{id}:
    delete:
      consumes:
      - application/json
      description: Delete article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete article
      tags:
      - articles
    get:
      consumes:
      - application/json
      description: Get article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Article'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get article
      tags:
      - articles
    put:
      consumes:
      - application/json
      description: Update article by ID
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: integer
      - description: Article info
        in: body
        name: article
        required: true
        schema:
          $ref: '#/definitions/service.UpdateArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.Article'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update article
      tags:
      - articles
  /users/{id}:
    put:
      consumes:
      - application/json
      description: Update user info
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update user
      tags:
      - users
  /users/login:
    post:
      consumes:
      - application/json
      description: Login with username and password
      parameters:
      - description: Login info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/service.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/service.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register user
      tags:
      - users
swagger: "2.0"
